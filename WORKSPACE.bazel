workspace(name = "space-game")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")


# Load and configure bazel_skylib

http_archive(
    name = "bazel_skylib",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
    ],
    sha256 = "f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728",
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()


# Load and configure rules_nixpkgs

http_archive(
    name = "io_tweag_rules_nixpkgs",
    sha256 = "b01f170580f646ee3cde1ea4c117d00e561afaf3c59eda604cf09194a824ff10",
    strip_prefix = "rules_nixpkgs-0.9.0",
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/v0.9.0.tar.gz"],
)

load("@io_tweag_rules_nixpkgs//nixpkgs:repositories.bzl", "rules_nixpkgs_dependencies")

rules_nixpkgs_dependencies()

load("@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl", "nixpkgs_local_repository", "nixpkgs_cc_configure")

nixpkgs_local_repository(
    name = "nixpkgs",
    nix_file = "//:nixpkgs.nix",
    nix_file_deps = ["//:nixpkgs.json"],
)

nixpkgs_cc_configure(
    name = "nixpkgs_config_cc",
    repository = "@nixpkgs",
)


# Load and configure rules_pkg

http_archive(
    name = "rules_pkg",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.7.0/rules_pkg-0.7.0.tar.gz",
        "https://github.com/bazelbuild/rules_pkg/releases/download/0.7.0/rules_pkg-0.7.0.tar.gz",
    ],
    sha256 = "8a298e832762eda1830597d64fe7db58178aa84cd5926d76d5b744d6558941c2",
)

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()


# Create nixpkgs repositories for dependencies.

load("@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl", "nixpkgs_package")

nixpkgs_package(
    name = "argtable",
    build_file_content = """\
cc_library(
    name = "argtable",
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    srcs = ["lib/libargtable3.so.0"],
    visibility = ["//visibility:public"],
)
""",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "boost",
    nix_file_content = """\
with import <nixpkgs> {
  config = { };
  overlays = [ ];
};
buildEnv {
  name = "boost";
  paths = [ boost155 boost155.dev ];
  postBuild = ''
    mkdir -p $out
  '';
}
""",
    build_file_content = """\
cc_library(
    name = "boost",
    hdrs = glob(["include/**/*.hpp"]),
    includes = ["include"],
    srcs = ["lib/libboost_system.so.1.55.0"],
    visibility = ["//visibility:public"],
)
""",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "cegui",
    build_file_content = """\
cc_library(
    name = "cegui",
    hdrs = glob(["include/**/*.h"]),
    includes = ["include/cegui-0"],
    srcs = [
        "lib/libCEGUIBase-0.so.2",
        "lib/libCEGUIOgreRenderer-0.so.2",
    ],
    visibility = ["//visibility:public"],
)
""",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "enet",
    build_file_content = """\
cc_library(
    name = "enet",
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    srcs = ["lib/libenet.so.7"],
    visibility = ["//visibility:public"],
)
""",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "expat",
    nix_file_content = """\
with import <nixpkgs> {
  config = { };
  overlays = [ ];
};
buildEnv {
  name = "expat";
  paths = [ expat expat.dev ];
  postBuild = ''
    mkdir -p $out
  '';
}
""",
    build_file_content = """\
cc_library(
    name = "expat",
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    srcs = ["lib/libexpat.so.1"],
    visibility = ["//visibility:public"],
)
""",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "lua",
    attribute_path = "lua5_1",
    build_file_content = """\
cc_library(
    name = "lua",
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    srcs = ["lib/liblua.so.5.1"],
    visibility = ["//visibility:public"],
)
""",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "ogre",
    attribute_path = "ogre1_10",
    nix_file_content = """\
      import <nixpkgs> {
        config = { };
        overlays = [
          (self: super: {
            ogre1_10 = super.ogre1_10.overrideAttrs (previous: {
              patches = [
                "${super.writeTextFile {
                  name = "debug-ogre-crash";
                  text = ''
                    --- ./RenderSystems/GLSupport/src/GLX/OgreGLXWindow.cpp.original	2023-02-09 10:23:56.774671229 +0000
                    +++ ./RenderSystems/GLSupport/src/GLX/OgreGLXWindow.cpp	2023-02-09 11:13:30.838707706 +0000
                    @@ -48,6 +48,8 @@
                     
                     #include "OgreGLRenderSystemCommon.h"
                     
                    +#include <iostream>
                    +
                     namespace {
                         int safeXErrorHandler (Display *display, XErrorEvent *event)
                         {
                    @@ -271,15 +273,18 @@
                             // Derive fbConfig
                     
                             ::GLXFBConfig fbConfig = 0;
                    +        std::cerr << "\\x1b[1;36mAttempting to derive fbConfig\\x1b[0m" << std::endl;
                     
                             if (glxDrawable)
                             {
                                 fbConfig = mGLSupport->getFBConfigFromDrawable (glxDrawable, &width, &height);
                    +            std::cerr << "\\x1b[1;36mgetFBConfigFromDrawable: fbConfig = " << fbConfig << "\\x1b[0m" << std::endl;
                             }
                     
                             if (! fbConfig && glxContext)
                             {
                                 fbConfig = mGLSupport->getFBConfigFromContext (glxContext);
                    +            std::cerr << "\\x1b[1;36mgetFBConfigFromContext: fbConfig = " << fbConfig << "\\x1b[0m" << std::endl;
                             }
                     
                             mIsExternal = (glxDrawable != 0);
                    @@ -310,8 +315,11 @@
                                 };
                     
                                 fbConfig = mGLSupport->selectFBConfig(minAttribs, maxAttribs);
                    +            std::cerr << "\\x1b[1;36mselectFBConfig: fbConfig = " << fbConfig << "\\x1b[0m" << std::endl;
                             }
                     
                    +        std::cerr << "\\x1b[1;36mfbConfig = " << fbConfig << "\\x1b[0m" << std::endl;
                    +
                             if (fbConfig)
                             {
                                 // Now check the actual fsaa and gamma value
                    @@ -333,6 +341,7 @@
                             else
                             {
                                 // This should never happen.
                    +            std::cerr << "\\x1b[1;36mabout to throw ERR_RENDERINGAPI_ERROR\\x1b[0m" << std::endl;
                                 OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Unexpected failure to determine a GLXFBConfig","GLXWindow::create");
                             }
                  '';
                }}"
              ];
            });
          })
        ];
      }
    """,
    build_file_content = """\
cc_library(
    name = "ogre",
    hdrs = glob(["include/**/*.h"]),
    includes = [
        "include",
        "include/OGRE",
        "include/OGRE/Overlay",
    ],
    srcs = [
        "lib/libOgreMain.so.1.10.11",
        "lib/libOgreOverlay.so.1.10.11",
    ],
    visibility = ["//visibility:public"],
)
exports_files([
    "bin/OgreXMLConverter",
    "lib/OGRE",
])
""",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "ois",
    build_file_content = """\
cc_library(
    name = "ois",
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    srcs = ["lib/libOIS.so.1.5.0"],
    visibility = ["//visibility:public"],
)
""",
    repository = "@nixpkgs",
)

load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

new_git_repository(
    name = "nixgl",
    remote = "https://github.com/guibou/nixGL",
    commit = "7165ffbccbd2cf4379b6cd6d2edd1620a427e5ae",
    shallow_since = "1661367362 +0200",
    build_file_content = "exports_files(glob([\"**/*\"]))",
)
